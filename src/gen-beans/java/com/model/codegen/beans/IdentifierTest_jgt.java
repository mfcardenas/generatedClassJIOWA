//
// AUTOMATICALLY GENERATED from template file IdentifierTest.jgt
// 
// by the Jiowa Code Generation Framework (www.jiowa.de)
//

package com.model.codegen.beans;

import com.jiowa.template.variable.*;
import com.jiowa.template.bean.*;
import com.jiowa.template.bean.part.*;
import com.jiowa.template.variable.*;
import com.jiowa.template.variable.parser.*;
import com.jiowa.template.text.operator.*;
import java.util.*;

/**
 * AUTOMATICALLY GENERATED <br>
 *  
 * Template Bean: IdentifierTest_jgt <br>
 * Generation Timestamp: Wed Dec 05 00:56:07 CET 2018 <br>
 * JIOWA CodeGen Version: jiowa-codegen-2.1.6 
 * 
 * <p>
 * Generated by the JIOWA Code Generation Framework (<a href="http://www.jiowa.de">www.jiowa.de</a>) <br>
 * Written by <a href="http://www.mencl.de/">Robert Mencl</a> for <br>
 * JIOWA Business Solutions GmbH, Bettinastr. 30, D-60325 Frankfurt am Main, Germany.<br>
 * Download link: <a href="http://www.jiowa.de/download.html">www.jiowa.de/download.html</a> <br>
 * License: <a href="http://www.jiowa.de/license.html">www.jiowa.de/license.html</a>
 * 
 */
@SuppressWarnings("unused")
public class IdentifierTest_jgt extends TemplateBean
{   
    /*------------------------------------------------------------------------*\
     * Fields & constants:                                                    *
    \*------------------------------------------------------------------------*/
    
    /**
     * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
     */
    public static final java.lang.String ID = "IdentifierTest.";            
    
    /*------------------------------------------------------------------------*\
     * Constructors:                                                          *
    \*------------------------------------------------------------------------*/

    public IdentifierTest_jgt()
    {
        initialize();
    }

    /** 
     * Something similar like a copy constructor.
     * Actually it is a 'parent constructor'.
     * During evaluation, each time a variable or subtemplate has not been set the 
     * evaluator if has been set in the parent bean.
     * If so, it takes the values from the parent bean.
     * @param parent parent template bean for value propagation
     */    
    public IdentifierTest_jgt(TemplateBean parent)
    {
        super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
        initialize();
    }
    
    /*------------------------------------------------------------------------*\
     * Static creation methods:                                               *
     * (often used while filling data into a template bean)                   *
    \*------------------------------------------------------------------------*/

    /**
     * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
     * @return the ID of this template bean as string value
     */
    @Override
    public java.lang.String id()
    {
        return ID; 
    }

    /*------------------------------------------------------------------------*\
     * Methods for template variables:                                        *
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
     * Classes & Methods for sub template structures:                         *
    \*------------------------------------------------------------------------*/
    
    /** 
     * Constant pourChaqueElement which can be used for the data insertion process 
     */
    public final pourChaqueElement pourChaqueElement = new pourChaqueElement(this);
    
    /**
     * This class resembles the subtemplate structure identifier 'pourChaqueElement' from the 
     * template IdentifierTest.jgt.
     */
    public static class pourChaqueElement
    {
        /*------------------------------------------------------------------------*\
         * ID to template bean class mapping :                                    *
        \*------------------------------------------------------------------------*/
        
        /**
         * This map delivers the corresponding template bean class for a given (sub)template identifier.
         * This ensures that (sub)template filtering works even in those cases where the user might choose
         * to obfuscate his template beans (for whatever reason).
         */
        protected static ID2ClassMap ID_2_CLASS_MAP = new ID2ClassMap();
        
        /*------------------------------------------------------------------------*\
         * Parent template bean:                                                  *
        \*------------------------------------------------------------------------*/
        
        /** 
         * Parent template bean (also used for value propagation). 
         * If values or subtemplates are not set in this template, the initializations are propagated from 
         * the parent bean. 
         */
        protected IdentifierTest_jgt parent = null;
    
        /*------------------------------------------------------------------------*\
         * Constructors:                                                          *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Constructor for pourChaqueElement with a reference to parent bean. 
         * The parent bean is used for automatic value propagation which works for variable values as well as for subtemplates. 
         * @param parent parent bean for value propagation
         */
        protected pourChaqueElement(IdentifierTest_jgt parent)
        {
            this.parent = parent;
            if (this.parent != null)
            {
                this.parent.putID2ClassMap("pourChaqueElement", ID_2_CLASS_MAP);
            }
        }    
    
        /*------------------------------------------------------------------------*\
         * Methods                                                                *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Returns a reference to parent template bean. 
         * @return parent template bean
         */
        protected IdentifierTest_jgt parent()
        {
            return this.parent;        
        }
        
        /*------------------------------------------------------------------------*\
         * Nested classes for inline sub templates                                *
        \*------------------------------------------------------------------------*/
    
        /*------------------------------------------------------------------------*\
         * Public Methods for sub template structures:                            *
        \*------------------------------------------------------------------------*/
        
        /**
         * Returns all elements which have been stored for this sub template structure identifier: 'pourChaqueElement'.
         * @return list of all template beans for this sub structure identifier: 'pourChaqueElement'.
         */
        public TemplateBeanList getAll() 
        {
            return parent.subTemplateStructureMap().get("pourChaqueElement");
        }
    
        /**
         * Sets all elements of the template bean list for the subtemplate structure identifier 'pourChaqueElement'.
         * @param beanList the list of templates beans to be inserted for this substructure identifier: 'pourChaqueElement'
         * @return reference to current template bean.
         */
        public IdentifierTest_jgt setAll(TemplateBeanList beanList)
        {
            parent.subTemplateStructureMap.put("pourChaqueElement", beanList);
            return parent;
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier)
        {
            return parent.setSubTemplate("pourChaqueElement", subTemplateIdentifier);
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @param parentBean reference to parent bean for automatic value propagation
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier, TemplateBean parentBean)
        {
            return parent.setSubTemplate("pourChaqueElement", subTemplateIdentifier, parentBean); 
        }
    
        /** 
         * Clears all data that has been stored for subtemplate structure identifier 'pourChaqueElement'
         */
        public void clear()   
        {
            parent.subTemplateStructureMap().put("pourChaqueElement", new TemplateBeanList()); 
        }
        
        /*------------------------------------------------------------------------*\
         * Methods for sub templates of this inline sub template:                 *
         * (inclusion of inline and external sub templates)                       *
        \*------------------------------------------------------------------------*/
    
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("SubTemplate.", SubTemplate_jgt.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for pourChaqueElement. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public IdentifierTest_jgt prepend(SubTemplate_jgt bean)
        {
            parent.subTemplateStructureMap.prepend("pourChaqueElement", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean SubTemplate_jgt to pourChaqueElement and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public SubTemplate_jgt prepend_SubTemplate_jgt()
        {
            TemplateBean parentBean = parent;
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean SubTemplate_jgt to pourChaqueElement and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public SubTemplate_jgt prepend_SubTemplate_jgt(TemplateBean parentBean)
        {
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for pourChaqueElement. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public IdentifierTest_jgt append(SubTemplate_jgt bean)
        {
            parent.subTemplateStructureMap.append("pourChaqueElement", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean SubTemplate_jgt to pourChaqueElement and returns a reference to this bean. 
         * @return the reference to the created bean of type SubTemplate_jgt
         */
        public SubTemplate_jgt append_SubTemplate_jgt()
        {
            TemplateBean parentBean = parent;
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean SubTemplate_jgt to pourChaqueElement and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type SubTemplate_jgt
         */
        public SubTemplate_jgt append_SubTemplate_jgt(TemplateBean parentBean)
        {
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of pourChaqueElement to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public IdentifierTest_jgt set(SubTemplate_jgt bean)
        {
            parent.subTemplateStructureMap.put("pourChaqueElement", bean);
            return parent;
        }
        
        /** 
         * Sets a bean SubTemplate_jgt for pourChaqueElement and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public SubTemplate_jgt set_SubTemplate_jgt()
        {
            TemplateBean parentBean = parent;
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean SubTemplate_jgt for pourChaqueElement, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public SubTemplate_jgt set_SubTemplate_jgt(TemplateBean parentBean)
        {
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            set(bean);
            return bean;
        }
    }
    
    /** 
     * Constant fuerJedesElement which can be used for the data insertion process 
     */
    public final fuerJedesElement fuerJedesElement = new fuerJedesElement(this);
    
    /**
     * This class resembles the subtemplate structure identifier 'fuerJedesElement' from the 
     * template IdentifierTest.jgt.
     */
    public static class fuerJedesElement
    {
        /*------------------------------------------------------------------------*\
         * ID to template bean class mapping :                                    *
        \*------------------------------------------------------------------------*/
        
        /**
         * This map delivers the corresponding template bean class for a given (sub)template identifier.
         * This ensures that (sub)template filtering works even in those cases where the user might choose
         * to obfuscate his template beans (for whatever reason).
         */
        protected static ID2ClassMap ID_2_CLASS_MAP = new ID2ClassMap();
        
        /*------------------------------------------------------------------------*\
         * Parent template bean:                                                  *
        \*------------------------------------------------------------------------*/
        
        /** 
         * Parent template bean (also used for value propagation). 
         * If values or subtemplates are not set in this template, the initializations are propagated from 
         * the parent bean. 
         */
        protected IdentifierTest_jgt parent = null;
    
        /*------------------------------------------------------------------------*\
         * Constructors:                                                          *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Constructor for fuerJedesElement with a reference to parent bean. 
         * The parent bean is used for automatic value propagation which works for variable values as well as for subtemplates. 
         * @param parent parent bean for value propagation
         */
        protected fuerJedesElement(IdentifierTest_jgt parent)
        {
            this.parent = parent;
            if (this.parent != null)
            {
                this.parent.putID2ClassMap("fuerJedesElement", ID_2_CLASS_MAP);
            }
        }    
    
        /*------------------------------------------------------------------------*\
         * Methods                                                                *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Returns a reference to parent template bean. 
         * @return parent template bean
         */
        protected IdentifierTest_jgt parent()
        {
            return this.parent;        
        }
        
        /*------------------------------------------------------------------------*\
         * Nested classes for inline sub templates                                *
        \*------------------------------------------------------------------------*/
    
        /*------------------------------------------------------------------------*\
         * Public Methods for sub template structures:                            *
        \*------------------------------------------------------------------------*/
        
        /**
         * Returns all elements which have been stored for this sub template structure identifier: 'fuerJedesElement'.
         * @return list of all template beans for this sub structure identifier: 'fuerJedesElement'.
         */
        public TemplateBeanList getAll() 
        {
            return parent.subTemplateStructureMap().get("fuerJedesElement");
        }
    
        /**
         * Sets all elements of the template bean list for the subtemplate structure identifier 'fuerJedesElement'.
         * @param beanList the list of templates beans to be inserted for this substructure identifier: 'fuerJedesElement'
         * @return reference to current template bean.
         */
        public IdentifierTest_jgt setAll(TemplateBeanList beanList)
        {
            parent.subTemplateStructureMap.put("fuerJedesElement", beanList);
            return parent;
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier)
        {
            return parent.setSubTemplate("fuerJedesElement", subTemplateIdentifier);
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @param parentBean reference to parent bean for automatic value propagation
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier, TemplateBean parentBean)
        {
            return parent.setSubTemplate("fuerJedesElement", subTemplateIdentifier, parentBean); 
        }
    
        /** 
         * Clears all data that has been stored for subtemplate structure identifier 'fuerJedesElement'
         */
        public void clear()   
        {
            parent.subTemplateStructureMap().put("fuerJedesElement", new TemplateBeanList()); 
        }
        
        /*------------------------------------------------------------------------*\
         * Methods for sub templates of this inline sub template:                 *
         * (inclusion of inline and external sub templates)                       *
        \*------------------------------------------------------------------------*/
    
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("SubTemplate.", SubTemplate_jgt.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for fuerJedesElement. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public IdentifierTest_jgt prepend(SubTemplate_jgt bean)
        {
            parent.subTemplateStructureMap.prepend("fuerJedesElement", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean SubTemplate_jgt to fuerJedesElement and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public SubTemplate_jgt prepend_SubTemplate_jgt()
        {
            TemplateBean parentBean = parent;
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean SubTemplate_jgt to fuerJedesElement and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public SubTemplate_jgt prepend_SubTemplate_jgt(TemplateBean parentBean)
        {
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for fuerJedesElement. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public IdentifierTest_jgt append(SubTemplate_jgt bean)
        {
            parent.subTemplateStructureMap.append("fuerJedesElement", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean SubTemplate_jgt to fuerJedesElement and returns a reference to this bean. 
         * @return the reference to the created bean of type SubTemplate_jgt
         */
        public SubTemplate_jgt append_SubTemplate_jgt()
        {
            TemplateBean parentBean = parent;
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean SubTemplate_jgt to fuerJedesElement and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type SubTemplate_jgt
         */
        public SubTemplate_jgt append_SubTemplate_jgt(TemplateBean parentBean)
        {
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of fuerJedesElement to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public IdentifierTest_jgt set(SubTemplate_jgt bean)
        {
            parent.subTemplateStructureMap.put("fuerJedesElement", bean);
            return parent;
        }
        
        /** 
         * Sets a bean SubTemplate_jgt for fuerJedesElement and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public SubTemplate_jgt set_SubTemplate_jgt()
        {
            TemplateBean parentBean = parent;
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean SubTemplate_jgt for fuerJedesElement, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public SubTemplate_jgt set_SubTemplate_jgt(TemplateBean parentBean)
        {
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            set(bean);
            return bean;
        }
    }
    
    /** 
     * Constant Whatever_you_like which can be used for the data insertion process 
     */
    public final Whatever_you_like Whatever_you_like = new Whatever_you_like(this);
    
    /**
     * This class resembles the subtemplate structure identifier 'Whatever_you_like' from the 
     * template IdentifierTest.jgt.
     */
    public static class Whatever_you_like
    {
        /*------------------------------------------------------------------------*\
         * ID to template bean class mapping :                                    *
        \*------------------------------------------------------------------------*/
        
        /**
         * This map delivers the corresponding template bean class for a given (sub)template identifier.
         * This ensures that (sub)template filtering works even in those cases where the user might choose
         * to obfuscate his template beans (for whatever reason).
         */
        protected static ID2ClassMap ID_2_CLASS_MAP = new ID2ClassMap();
        
        /*------------------------------------------------------------------------*\
         * Parent template bean:                                                  *
        \*------------------------------------------------------------------------*/
        
        /** 
         * Parent template bean (also used for value propagation). 
         * If values or subtemplates are not set in this template, the initializations are propagated from 
         * the parent bean. 
         */
        protected IdentifierTest_jgt parent = null;
    
        /*------------------------------------------------------------------------*\
         * Constructors:                                                          *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Constructor for Whatever_you_like with a reference to parent bean. 
         * The parent bean is used for automatic value propagation which works for variable values as well as for subtemplates. 
         * @param parent parent bean for value propagation
         */
        protected Whatever_you_like(IdentifierTest_jgt parent)
        {
            this.parent = parent;
            if (this.parent != null)
            {
                this.parent.putID2ClassMap("Whatever_you_like", ID_2_CLASS_MAP);
            }
        }    
    
        /*------------------------------------------------------------------------*\
         * Methods                                                                *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Returns a reference to parent template bean. 
         * @return parent template bean
         */
        protected IdentifierTest_jgt parent()
        {
            return this.parent;        
        }
        
        /*------------------------------------------------------------------------*\
         * Nested classes for inline sub templates                                *
        \*------------------------------------------------------------------------*/
    
        /*------------------------------------------------------------------------*\
         * Public Methods for sub template structures:                            *
        \*------------------------------------------------------------------------*/
        
        /**
         * Returns all elements which have been stored for this sub template structure identifier: 'Whatever_you_like'.
         * @return list of all template beans for this sub structure identifier: 'Whatever_you_like'.
         */
        public TemplateBeanList getAll() 
        {
            return parent.subTemplateStructureMap().get("Whatever_you_like");
        }
    
        /**
         * Sets all elements of the template bean list for the subtemplate structure identifier 'Whatever_you_like'.
         * @param beanList the list of templates beans to be inserted for this substructure identifier: 'Whatever_you_like'
         * @return reference to current template bean.
         */
        public IdentifierTest_jgt setAll(TemplateBeanList beanList)
        {
            parent.subTemplateStructureMap.put("Whatever_you_like", beanList);
            return parent;
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier)
        {
            return parent.setSubTemplate("Whatever_you_like", subTemplateIdentifier);
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @param parentBean reference to parent bean for automatic value propagation
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier, TemplateBean parentBean)
        {
            return parent.setSubTemplate("Whatever_you_like", subTemplateIdentifier, parentBean); 
        }
    
        /** 
         * Clears all data that has been stored for subtemplate structure identifier 'Whatever_you_like'
         */
        public void clear()   
        {
            parent.subTemplateStructureMap().put("Whatever_you_like", new TemplateBeanList()); 
        }
        
        /*------------------------------------------------------------------------*\
         * Methods for sub templates of this inline sub template:                 *
         * (inclusion of inline and external sub templates)                       *
        \*------------------------------------------------------------------------*/
    
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("SubTemplate.", SubTemplate_jgt.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for Whatever_you_like. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public IdentifierTest_jgt prepend(SubTemplate_jgt bean)
        {
            parent.subTemplateStructureMap.prepend("Whatever_you_like", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean SubTemplate_jgt to Whatever_you_like and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public SubTemplate_jgt prepend_SubTemplate_jgt()
        {
            TemplateBean parentBean = parent;
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean SubTemplate_jgt to Whatever_you_like and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public SubTemplate_jgt prepend_SubTemplate_jgt(TemplateBean parentBean)
        {
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for Whatever_you_like. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public IdentifierTest_jgt append(SubTemplate_jgt bean)
        {
            parent.subTemplateStructureMap.append("Whatever_you_like", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean SubTemplate_jgt to Whatever_you_like and returns a reference to this bean. 
         * @return the reference to the created bean of type SubTemplate_jgt
         */
        public SubTemplate_jgt append_SubTemplate_jgt()
        {
            TemplateBean parentBean = parent;
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean SubTemplate_jgt to Whatever_you_like and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type SubTemplate_jgt
         */
        public SubTemplate_jgt append_SubTemplate_jgt(TemplateBean parentBean)
        {
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of Whatever_you_like to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public IdentifierTest_jgt set(SubTemplate_jgt bean)
        {
            parent.subTemplateStructureMap.put("Whatever_you_like", bean);
            return parent;
        }
        
        /** 
         * Sets a bean SubTemplate_jgt for Whatever_you_like and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public SubTemplate_jgt set_SubTemplate_jgt()
        {
            TemplateBean parentBean = parent;
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean SubTemplate_jgt for Whatever_you_like, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public SubTemplate_jgt set_SubTemplate_jgt(TemplateBean parentBean)
        {
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            set(bean);
            return bean;
        }
    }

    /*------------------------------------------------------------------------*\
     * Creates the bean parts of this template bean that are used by the      *
     * super class for the toString() method.                                 *
    \*------------------------------------------------------------------------*/

    /** 
     * Initializer for variables and subtemplate structures
     * and for the data structures (i.e. bean parts) which prepare the bean data for the
     * toString() method.
     */
    protected void initialize()
    {
        // variables:        
        // subtemplates:
        subTemplateStructureIdentifiers.add("pourChaqueElement");
        subTemplateStructureIdentifiers.add("fuerJedesElement");
        subTemplateStructureIdentifiers.add("Whatever_you_like");        
        // bean parts for toString() method:
        partList.add(new TextPart("\n",0));
        partList.add(new SubTemplateStructurePart("fuerJedesElement",0,"SubTemplate."));
        partList.add(new TextPart("\n\n",39));
        partList.add(new SubTemplateStructurePart("pourChaqueElement",0,"SubTemplate."));
        partList.add(new TextPart("\n\n",40));
        partList.add(new SubTemplateStructurePart("Whatever_you_like",0,"SubTemplate."));
    }
}


