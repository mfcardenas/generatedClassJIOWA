//
// AUTOMATICALLY GENERATED from template file JavaClass.jgt
// 
// by the Jiowa Code Generation Framework (www.jiowa.de)
//

package com.model.codegen.beans;

import com.jiowa.template.variable.*;
import com.jiowa.template.bean.*;
import com.jiowa.template.bean.part.*;
import com.jiowa.template.variable.*;
import com.jiowa.template.variable.parser.*;
import com.jiowa.template.text.operator.*;
import java.util.*;

/**
 * AUTOMATICALLY GENERATED <br>
 *  
 * Template Bean: JavaClass_jgt <br>
 * Generation Timestamp: Wed Dec 05 00:56:07 CET 2018 <br>
 * JIOWA CodeGen Version: jiowa-codegen-2.1.6 
 * 
 * <p>
 * Generated by the JIOWA Code Generation Framework (<a href="http://www.jiowa.de">www.jiowa.de</a>) <br>
 * Written by <a href="http://www.mencl.de/">Robert Mencl</a> for <br>
 * JIOWA Business Solutions GmbH, Bettinastr. 30, D-60325 Frankfurt am Main, Germany.<br>
 * Download link: <a href="http://www.jiowa.de/download.html">www.jiowa.de/download.html</a> <br>
 * License: <a href="http://www.jiowa.de/license.html">www.jiowa.de/license.html</a>
 * 
 */
@SuppressWarnings("unused")
public class JavaClass_jgt extends TemplateBean
{   
    /*------------------------------------------------------------------------*\
     * Fields & constants:                                                    *
    \*------------------------------------------------------------------------*/
    
    /**
     * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
     */
    public static final java.lang.String ID = "JavaClass.";            
    
    /*------------------------------------------------------------------------*\
     * Constructors:                                                          *
    \*------------------------------------------------------------------------*/

    public JavaClass_jgt()
    {
        initialize();
    }

    /** 
     * Something similar like a copy constructor.
     * Actually it is a 'parent constructor'.
     * During evaluation, each time a variable or subtemplate has not been set the 
     * evaluator if has been set in the parent bean.
     * If so, it takes the values from the parent bean.
     * @param parent parent template bean for value propagation
     */    
    public JavaClass_jgt(TemplateBean parent)
    {
        super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
        initialize();
    }
    
    /*------------------------------------------------------------------------*\
     * Static creation methods:                                               *
     * (often used while filling data into a template bean)                   *
    \*------------------------------------------------------------------------*/

    /**
     * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
     * @return the ID of this template bean as string value
     */
    @Override
    public java.lang.String id()
    {
        return ID; 
    }

    /*------------------------------------------------------------------------*\
     * Methods for template variables:                                        *
    \*------------------------------------------------------------------------*/

    /**
     * Returns the value of PackageName.
     * @return value of PackageName
     */
    public java.lang.String getPackageName()
    {
        return variableValue("PackageName"); 
    }
    
    /**
     * Sets the value of PackageName.
     * @param value the value of PackageName as string
     * @return the reference to the current template bean
     */
    public JavaClass_jgt setPackageName(java.lang.String value)
    {
        variableMap.put("PackageName", value);
        return this;
    }
    
    /**
     * Returns the value of ClassName.
     * @return value of ClassName
     */
    public java.lang.String getClassName()
    {
        return variableValue("ClassName"); 
    }
    
    /**
     * Sets the value of ClassName.
     * @param value the value of ClassName as string
     * @return the reference to the current template bean
     */
    public JavaClass_jgt setClassName(java.lang.String value)
    {
        variableMap.put("ClassName", value);
        return this;
    }

    /*------------------------------------------------------------------------*\
     * Classes & Methods for sub template structures:                         *
    \*------------------------------------------------------------------------*/
    
    /** 
     * Constant foreachAttribute which can be used for the data insertion process 
     */
    public final foreachAttribute foreachAttribute = new foreachAttribute(this);
    
    /**
     * This class resembles the subtemplate structure identifier 'foreachAttribute' from the 
     * template JavaClass.jgt.
     */
    public static class foreachAttribute
    {
        /*------------------------------------------------------------------------*\
         * ID to template bean class mapping :                                    *
        \*------------------------------------------------------------------------*/
        
        /**
         * This map delivers the corresponding template bean class for a given (sub)template identifier.
         * This ensures that (sub)template filtering works even in those cases where the user might choose
         * to obfuscate his template beans (for whatever reason).
         */
        protected static ID2ClassMap ID_2_CLASS_MAP = new ID2ClassMap();
        
        /*------------------------------------------------------------------------*\
         * Parent template bean:                                                  *
        \*------------------------------------------------------------------------*/
        
        /** 
         * Parent template bean (also used for value propagation). 
         * If values or subtemplates are not set in this template, the initializations are propagated from 
         * the parent bean. 
         */
        protected JavaClass_jgt parent = null;
    
        /*------------------------------------------------------------------------*\
         * Constructors:                                                          *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Constructor for foreachAttribute with a reference to parent bean. 
         * The parent bean is used for automatic value propagation which works for variable values as well as for subtemplates. 
         * @param parent parent bean for value propagation
         */
        protected foreachAttribute(JavaClass_jgt parent)
        {
            this.parent = parent;
            if (this.parent != null)
            {
                this.parent.putID2ClassMap("foreachAttribute", ID_2_CLASS_MAP);
            }
        }    
    
        /*------------------------------------------------------------------------*\
         * Methods                                                                *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Returns a reference to parent template bean. 
         * @return parent template bean
         */
        protected JavaClass_jgt parent()
        {
            return this.parent;        
        }
        
        /*------------------------------------------------------------------------*\
         * Nested classes for inline sub templates                                *
        \*------------------------------------------------------------------------*/
    
        /**
         * Inline subtemplate bean class for identifier: Argument 
         */
        public static class Argument extends TemplateBean
        {   
            /*------------------------------------------------------------------------*\
             * Fields & constants:                                                    *
            \*------------------------------------------------------------------------*/
            
            /**
             * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
             */
            public static final java.lang.String ID = "Argument";        
        
            /** Upward link from this template bean to host bean JavaClass_jgt */
            protected JavaClass_jgt JavaClass_jgt;     
            
            /*------------------------------------------------------------------------*\
             * Constructors:                                                          *
            \*------------------------------------------------------------------------*/
        
            public Argument()
            {
                initialize();
            }
        
            /** 
             * Something similar like a copy constructor.
             * Actually it is a 'parent constructor'.
             * During evaluation, each time a variable or subtemplate has not been set the 
             * evaluator if has been set in the parent bean.
             * If so, it takes the values from the parent bean.
             * @param parent parent template bean for value propagation
             */    
            public Argument(TemplateBean parent)
            {
                super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
                initialize();
            }
        
            /**
             * Creates and instance of this bean with parent reference and links this bean 
             * to the host bean class which encloses this class above the substructure class.
             * 
             * @param parent Reference to the parent bean for value propagation. This can be a template bean of any type!
             * @param hostBean Reference to the template bean class instance in which this template bean is nesting in. 
             *                 This reference can be used to navigate 'upwards' during the data insertion process.
             */
            protected Argument(TemplateBean parent, JavaClass_jgt hostBean)
            {
                 super(parent);
                 this.JavaClass_jgt = hostBean;
                 initialize();
            }
            
            /*------------------------------------------------------------------------*\
             * Static creation methods:                                               *
             * (often used while filling data into a template bean)                   *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
             * @return the ID of this template bean as string value
             */
            @Override
            public java.lang.String id()
            {
                return ID; 
            }
        
            /**
             * Returns the reference to the enclosing host template bean. 
             * This is used during the data insertion process for navigation across the different classes.
             * @return the reference to the host bean 'JavaClass_jgt'
             */
            public JavaClass_jgt JavaClass_jgt()
            {   
                return this.JavaClass_jgt;
            }
        
            /*------------------------------------------------------------------------*\
             * Methods for template variables:                                        *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the value of DataType.
             * @return value of DataType
             */
            public java.lang.String getDataType()
            {
                return variableValue("DataType"); 
            }
            
            /**
             * Sets the value of DataType.
             * @param value the value of DataType as string
             * @return the reference to the current template bean
             */
            public Argument setDataType(java.lang.String value)
            {
                variableMap.put("DataType", value);
                return this;
            }
            
            /**
             * Returns the value of AttributeName.
             * @return value of AttributeName
             */
            public java.lang.String getAttributeName()
            {
                return variableValue("AttributeName"); 
            }
            
            /**
             * Sets the value of AttributeName.
             * @param value the value of AttributeName as string
             * @return the reference to the current template bean
             */
            public Argument setAttributeName(java.lang.String value)
            {
                variableMap.put("AttributeName", value);
                return this;
            }
        
            /*------------------------------------------------------------------------*\
             * Classes & Methods for sub template structures:                         *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Creates the bean parts of this template bean that are used by the      *
             * super class for the toString() method.                                 *
            \*------------------------------------------------------------------------*/
        
            /** 
             * Initializer for variables and subtemplate structures
             * and for the data structures (i.e. bean parts) which prepare the bean data for the
             * toString() method.
             */
            protected void initialize()
            {
                // variables:
                variables.add("DataType");
                variables.add("AttributeName");        
                // subtemplates:        
                // bean parts for toString() method:
                partList.add(new TextPart("",0));
                partList.add(new VariablePart("DataType","<<DataType>>",0));
                partList.add(new TextPart(" ",16));
                partList.add(new VariablePart("AttributeName","<<AttributeName>>",17));
                partList.add(new TextPart(", ",38));
            }
        }
        
        /**
         * Inline subtemplate bean class for identifier: Attribute 
         */
        public static class Attribute extends TemplateBean
        {   
            /*------------------------------------------------------------------------*\
             * Fields & constants:                                                    *
            \*------------------------------------------------------------------------*/
            
            /**
             * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
             */
            public static final java.lang.String ID = "Attribute";        
        
            /** Upward link from this template bean to host bean JavaClass_jgt */
            protected JavaClass_jgt JavaClass_jgt;     
            
            /*------------------------------------------------------------------------*\
             * Constructors:                                                          *
            \*------------------------------------------------------------------------*/
        
            public Attribute()
            {
                initialize();
            }
        
            /** 
             * Something similar like a copy constructor.
             * Actually it is a 'parent constructor'.
             * During evaluation, each time a variable or subtemplate has not been set the 
             * evaluator if has been set in the parent bean.
             * If so, it takes the values from the parent bean.
             * @param parent parent template bean for value propagation
             */    
            public Attribute(TemplateBean parent)
            {
                super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
                initialize();
            }
        
            /**
             * Creates and instance of this bean with parent reference and links this bean 
             * to the host bean class which encloses this class above the substructure class.
             * 
             * @param parent Reference to the parent bean for value propagation. This can be a template bean of any type!
             * @param hostBean Reference to the template bean class instance in which this template bean is nesting in. 
             *                 This reference can be used to navigate 'upwards' during the data insertion process.
             */
            protected Attribute(TemplateBean parent, JavaClass_jgt hostBean)
            {
                 super(parent);
                 this.JavaClass_jgt = hostBean;
                 initialize();
            }
            
            /*------------------------------------------------------------------------*\
             * Static creation methods:                                               *
             * (often used while filling data into a template bean)                   *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
             * @return the ID of this template bean as string value
             */
            @Override
            public java.lang.String id()
            {
                return ID; 
            }
        
            /**
             * Returns the reference to the enclosing host template bean. 
             * This is used during the data insertion process for navigation across the different classes.
             * @return the reference to the host bean 'JavaClass_jgt'
             */
            public JavaClass_jgt JavaClass_jgt()
            {   
                return this.JavaClass_jgt;
            }
        
            /*------------------------------------------------------------------------*\
             * Methods for template variables:                                        *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the value of DataType.
             * @return value of DataType
             */
            public java.lang.String getDataType()
            {
                return variableValue("DataType"); 
            }
            
            /**
             * Sets the value of DataType.
             * @param value the value of DataType as string
             * @return the reference to the current template bean
             */
            public Attribute setDataType(java.lang.String value)
            {
                variableMap.put("DataType", value);
                return this;
            }
            
            /**
             * Returns the value of AttributeName.
             * @return value of AttributeName
             */
            public java.lang.String getAttributeName()
            {
                return variableValue("AttributeName"); 
            }
            
            /**
             * Sets the value of AttributeName.
             * @param value the value of AttributeName as string
             * @return the reference to the current template bean
             */
            public Attribute setAttributeName(java.lang.String value)
            {
                variableMap.put("AttributeName", value);
                return this;
            }
        
            /*------------------------------------------------------------------------*\
             * Classes & Methods for sub template structures:                         *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Creates the bean parts of this template bean that are used by the      *
             * super class for the toString() method.                                 *
            \*------------------------------------------------------------------------*/
        
            /** 
             * Initializer for variables and subtemplate structures
             * and for the data structures (i.e. bean parts) which prepare the bean data for the
             * toString() method.
             */
            protected void initialize()
            {
                // variables:
                variables.add("DataType");
                variables.add("AttributeName");        
                // subtemplates:        
                // bean parts for toString() method:
                partList.add(new TextPart("protected ",0));
                partList.add(new VariablePart("DataType","<<DataType>>",10));
                partList.add(new TextPart(" ",26));
                partList.add(new VariablePart("AttributeName","<<AttributeName>>",27));
                partList.add(new TextPart(";\n",48));
            }
        }
        
        /**
         * Inline subtemplate bean class for identifier: AttributeInit 
         */
        public static class AttributeInit extends TemplateBean
        {   
            /*------------------------------------------------------------------------*\
             * Fields & constants:                                                    *
            \*------------------------------------------------------------------------*/
            
            /**
             * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
             */
            public static final java.lang.String ID = "AttributeInit";        
        
            /** Upward link from this template bean to host bean JavaClass_jgt */
            protected JavaClass_jgt JavaClass_jgt;     
            
            /*------------------------------------------------------------------------*\
             * Constructors:                                                          *
            \*------------------------------------------------------------------------*/
        
            public AttributeInit()
            {
                initialize();
            }
        
            /** 
             * Something similar like a copy constructor.
             * Actually it is a 'parent constructor'.
             * During evaluation, each time a variable or subtemplate has not been set the 
             * evaluator if has been set in the parent bean.
             * If so, it takes the values from the parent bean.
             * @param parent parent template bean for value propagation
             */    
            public AttributeInit(TemplateBean parent)
            {
                super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
                initialize();
            }
        
            /**
             * Creates and instance of this bean with parent reference and links this bean 
             * to the host bean class which encloses this class above the substructure class.
             * 
             * @param parent Reference to the parent bean for value propagation. This can be a template bean of any type!
             * @param hostBean Reference to the template bean class instance in which this template bean is nesting in. 
             *                 This reference can be used to navigate 'upwards' during the data insertion process.
             */
            protected AttributeInit(TemplateBean parent, JavaClass_jgt hostBean)
            {
                 super(parent);
                 this.JavaClass_jgt = hostBean;
                 initialize();
            }
            
            /*------------------------------------------------------------------------*\
             * Static creation methods:                                               *
             * (often used while filling data into a template bean)                   *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
             * @return the ID of this template bean as string value
             */
            @Override
            public java.lang.String id()
            {
                return ID; 
            }
        
            /**
             * Returns the reference to the enclosing host template bean. 
             * This is used during the data insertion process for navigation across the different classes.
             * @return the reference to the host bean 'JavaClass_jgt'
             */
            public JavaClass_jgt JavaClass_jgt()
            {   
                return this.JavaClass_jgt;
            }
        
            /*------------------------------------------------------------------------*\
             * Methods for template variables:                                        *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the value of AttributeName.
             * @return value of AttributeName
             */
            public java.lang.String getAttributeName()
            {
                return variableValue("AttributeName"); 
            }
            
            /**
             * Sets the value of AttributeName.
             * @param value the value of AttributeName as string
             * @return the reference to the current template bean
             */
            public AttributeInit setAttributeName(java.lang.String value)
            {
                variableMap.put("AttributeName", value);
                return this;
            }
        
            /*------------------------------------------------------------------------*\
             * Classes & Methods for sub template structures:                         *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Creates the bean parts of this template bean that are used by the      *
             * super class for the toString() method.                                 *
            \*------------------------------------------------------------------------*/
        
            /** 
             * Initializer for variables and subtemplate structures
             * and for the data structures (i.e. bean parts) which prepare the bean data for the
             * toString() method.
             */
            protected void initialize()
            {
                // variables:
                variables.add("AttributeName");        
                // subtemplates:        
                // bean parts for toString() method:
                partList.add(new TextPart("this.",0));
                partList.add(new VariablePart("AttributeName","<<AttributeName>>",5));
                partList.add(new TextPart(" = ",26));
                partList.add(new VariablePart("AttributeName","<<AttributeName>>",29));
                partList.add(new TextPart(";\n",50));
            }
        }
        
        /**
         * Inline subtemplate bean class for identifier: Getter 
         */
        public static class Getter extends TemplateBean
        {   
            /*------------------------------------------------------------------------*\
             * Fields & constants:                                                    *
            \*------------------------------------------------------------------------*/
            
            /**
             * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
             */
            public static final java.lang.String ID = "Getter";        
        
            /** Upward link from this template bean to host bean JavaClass_jgt */
            protected JavaClass_jgt JavaClass_jgt;     
            
            /*------------------------------------------------------------------------*\
             * Constructors:                                                          *
            \*------------------------------------------------------------------------*/
        
            public Getter()
            {
                initialize();
            }
        
            /** 
             * Something similar like a copy constructor.
             * Actually it is a 'parent constructor'.
             * During evaluation, each time a variable or subtemplate has not been set the 
             * evaluator if has been set in the parent bean.
             * If so, it takes the values from the parent bean.
             * @param parent parent template bean for value propagation
             */    
            public Getter(TemplateBean parent)
            {
                super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
                initialize();
            }
        
            /**
             * Creates and instance of this bean with parent reference and links this bean 
             * to the host bean class which encloses this class above the substructure class.
             * 
             * @param parent Reference to the parent bean for value propagation. This can be a template bean of any type!
             * @param hostBean Reference to the template bean class instance in which this template bean is nesting in. 
             *                 This reference can be used to navigate 'upwards' during the data insertion process.
             */
            protected Getter(TemplateBean parent, JavaClass_jgt hostBean)
            {
                 super(parent);
                 this.JavaClass_jgt = hostBean;
                 initialize();
            }
            
            /*------------------------------------------------------------------------*\
             * Static creation methods:                                               *
             * (often used while filling data into a template bean)                   *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
             * @return the ID of this template bean as string value
             */
            @Override
            public java.lang.String id()
            {
                return ID; 
            }
        
            /**
             * Returns the reference to the enclosing host template bean. 
             * This is used during the data insertion process for navigation across the different classes.
             * @return the reference to the host bean 'JavaClass_jgt'
             */
            public JavaClass_jgt JavaClass_jgt()
            {   
                return this.JavaClass_jgt;
            }
        
            /*------------------------------------------------------------------------*\
             * Methods for template variables:                                        *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the value of DataType.
             * @return value of DataType
             */
            public java.lang.String getDataType()
            {
                return variableValue("DataType"); 
            }
            
            /**
             * Sets the value of DataType.
             * @param value the value of DataType as string
             * @return the reference to the current template bean
             */
            public Getter setDataType(java.lang.String value)
            {
                variableMap.put("DataType", value);
                return this;
            }
            
            /**
             * Returns the value of AttributeName.
             * @return value of AttributeName
             */
            public java.lang.String getAttributeName()
            {
                return variableValue("AttributeName"); 
            }
            
            /**
             * Sets the value of AttributeName.
             * @param value the value of AttributeName as string
             * @return the reference to the current template bean
             */
            public Getter setAttributeName(java.lang.String value)
            {
                variableMap.put("AttributeName", value);
                return this;
            }
        
            /*------------------------------------------------------------------------*\
             * Classes & Methods for sub template structures:                         *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Creates the bean parts of this template bean that are used by the      *
             * super class for the toString() method.                                 *
            \*------------------------------------------------------------------------*/
        
            /** 
             * Initializer for variables and subtemplate structures
             * and for the data structures (i.e. bean parts) which prepare the bean data for the
             * toString() method.
             */
            protected void initialize()
            {
                // variables:
                variables.add("DataType");
                variables.add("AttributeName");        
                // subtemplates:        
                // bean parts for toString() method:
                partList.add(new TextPart("/**\n * Returns the value of type ",0));
                partList.add(new VariablePart("DataType","<<DataType>>",29));
                partList.add(new TextPart(" for attribute ",45));
                partList.add(new VariablePart("AttributeName","<<AttributeName>>",60));
                partList.add(new TextPart(".\n * @return result value\n */\npublic ",81));
                partList.add(new VariablePart("DataType","<<DataType>>",7));
                partList.add(new TextPart(" get",23));
                partList.add(new VariablePart("AttributeName","<<+AttributeName>>",27,FirstToUpperCaseOperator.getInstance()));
                partList.add(new TextPart("()   \n{\n    return this.",49));
                partList.add(new VariablePart("AttributeName","<<AttributeName>>",16));
                partList.add(new TextPart(";\n}\n\n",37));
            }
        }
    
        /*------------------------------------------------------------------------*\
         * Public Methods for sub template structures:                            *
        \*------------------------------------------------------------------------*/
        
        /**
         * Returns all elements which have been stored for this sub template structure identifier: 'foreachAttribute'.
         * @return list of all template beans for this sub structure identifier: 'foreachAttribute'.
         */
        public TemplateBeanList getAll() 
        {
            return parent.subTemplateStructureMap().get("foreachAttribute");
        }
    
        /**
         * Sets all elements of the template bean list for the subtemplate structure identifier 'foreachAttribute'.
         * @param beanList the list of templates beans to be inserted for this substructure identifier: 'foreachAttribute'
         * @return reference to current template bean.
         */
        public JavaClass_jgt setAll(TemplateBeanList beanList)
        {
            parent.subTemplateStructureMap.put("foreachAttribute", beanList);
            return parent;
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier)
        {
            return parent.setSubTemplate("foreachAttribute", subTemplateIdentifier);
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @param parentBean reference to parent bean for automatic value propagation
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier, TemplateBean parentBean)
        {
            return parent.setSubTemplate("foreachAttribute", subTemplateIdentifier, parentBean); 
        }
    
        /** 
         * Clears all data that has been stored for subtemplate structure identifier 'foreachAttribute'
         */
        public void clear()   
        {
            parent.subTemplateStructureMap().put("foreachAttribute", new TemplateBeanList()); 
        }
        
        /*------------------------------------------------------------------------*\
         * Methods for sub templates of this inline sub template:                 *
         * (inclusion of inline and external sub templates)                       *
        \*------------------------------------------------------------------------*/
    
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("Argument", Argument.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for foreachAttribute. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public JavaClass_jgt prepend(Argument bean)
        {
            parent.subTemplateStructureMap.prepend("foreachAttribute", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean Argument to foreachAttribute and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public Argument prepend_Argument()
        {
            TemplateBean parentBean = parent;
            Argument bean = new Argument(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean Argument to foreachAttribute and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public Argument prepend_Argument(TemplateBean parentBean)
        {
            Argument bean = new Argument(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for foreachAttribute. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public JavaClass_jgt append(Argument bean)
        {
            parent.subTemplateStructureMap.append("foreachAttribute", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean Argument to foreachAttribute and returns a reference to this bean. 
         * @return the reference to the created bean of type Argument
         */
        public Argument append_Argument()
        {
            TemplateBean parentBean = parent;
            Argument bean = new Argument(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean Argument to foreachAttribute and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type Argument
         */
        public Argument append_Argument(TemplateBean parentBean)
        {
            Argument bean = new Argument(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of foreachAttribute to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public JavaClass_jgt set(Argument bean)
        {
            parent.subTemplateStructureMap.put("foreachAttribute", bean);
            return parent;
        }
        
        /** 
         * Sets a bean Argument for foreachAttribute and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public Argument set_Argument()
        {
            TemplateBean parentBean = parent;
            Argument bean = new Argument(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean Argument for foreachAttribute, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public Argument set_Argument(TemplateBean parentBean)
        {
            Argument bean = new Argument(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("Attribute", Attribute.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for foreachAttribute. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public JavaClass_jgt prepend(Attribute bean)
        {
            parent.subTemplateStructureMap.prepend("foreachAttribute", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean Attribute to foreachAttribute and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public Attribute prepend_Attribute()
        {
            TemplateBean parentBean = parent;
            Attribute bean = new Attribute(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean Attribute to foreachAttribute and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public Attribute prepend_Attribute(TemplateBean parentBean)
        {
            Attribute bean = new Attribute(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for foreachAttribute. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public JavaClass_jgt append(Attribute bean)
        {
            parent.subTemplateStructureMap.append("foreachAttribute", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean Attribute to foreachAttribute and returns a reference to this bean. 
         * @return the reference to the created bean of type Attribute
         */
        public Attribute append_Attribute()
        {
            TemplateBean parentBean = parent;
            Attribute bean = new Attribute(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean Attribute to foreachAttribute and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type Attribute
         */
        public Attribute append_Attribute(TemplateBean parentBean)
        {
            Attribute bean = new Attribute(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of foreachAttribute to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public JavaClass_jgt set(Attribute bean)
        {
            parent.subTemplateStructureMap.put("foreachAttribute", bean);
            return parent;
        }
        
        /** 
         * Sets a bean Attribute for foreachAttribute and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public Attribute set_Attribute()
        {
            TemplateBean parentBean = parent;
            Attribute bean = new Attribute(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean Attribute for foreachAttribute, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public Attribute set_Attribute(TemplateBean parentBean)
        {
            Attribute bean = new Attribute(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("AttributeInit", AttributeInit.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for foreachAttribute. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public JavaClass_jgt prepend(AttributeInit bean)
        {
            parent.subTemplateStructureMap.prepend("foreachAttribute", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean AttributeInit to foreachAttribute and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public AttributeInit prepend_AttributeInit()
        {
            TemplateBean parentBean = parent;
            AttributeInit bean = new AttributeInit(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean AttributeInit to foreachAttribute and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public AttributeInit prepend_AttributeInit(TemplateBean parentBean)
        {
            AttributeInit bean = new AttributeInit(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for foreachAttribute. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public JavaClass_jgt append(AttributeInit bean)
        {
            parent.subTemplateStructureMap.append("foreachAttribute", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean AttributeInit to foreachAttribute and returns a reference to this bean. 
         * @return the reference to the created bean of type AttributeInit
         */
        public AttributeInit append_AttributeInit()
        {
            TemplateBean parentBean = parent;
            AttributeInit bean = new AttributeInit(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean AttributeInit to foreachAttribute and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type AttributeInit
         */
        public AttributeInit append_AttributeInit(TemplateBean parentBean)
        {
            AttributeInit bean = new AttributeInit(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of foreachAttribute to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public JavaClass_jgt set(AttributeInit bean)
        {
            parent.subTemplateStructureMap.put("foreachAttribute", bean);
            return parent;
        }
        
        /** 
         * Sets a bean AttributeInit for foreachAttribute and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public AttributeInit set_AttributeInit()
        {
            TemplateBean parentBean = parent;
            AttributeInit bean = new AttributeInit(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean AttributeInit for foreachAttribute, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public AttributeInit set_AttributeInit(TemplateBean parentBean)
        {
            AttributeInit bean = new AttributeInit(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("Getter", Getter.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for foreachAttribute. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public JavaClass_jgt prepend(Getter bean)
        {
            parent.subTemplateStructureMap.prepend("foreachAttribute", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean Getter to foreachAttribute and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public Getter prepend_Getter()
        {
            TemplateBean parentBean = parent;
            Getter bean = new Getter(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean Getter to foreachAttribute and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public Getter prepend_Getter(TemplateBean parentBean)
        {
            Getter bean = new Getter(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for foreachAttribute. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public JavaClass_jgt append(Getter bean)
        {
            parent.subTemplateStructureMap.append("foreachAttribute", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean Getter to foreachAttribute and returns a reference to this bean. 
         * @return the reference to the created bean of type Getter
         */
        public Getter append_Getter()
        {
            TemplateBean parentBean = parent;
            Getter bean = new Getter(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean Getter to foreachAttribute and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type Getter
         */
        public Getter append_Getter(TemplateBean parentBean)
        {
            Getter bean = new Getter(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of foreachAttribute to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public JavaClass_jgt set(Getter bean)
        {
            parent.subTemplateStructureMap.put("foreachAttribute", bean);
            return parent;
        }
        
        /** 
         * Sets a bean Getter for foreachAttribute and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public Getter set_Getter()
        {
            TemplateBean parentBean = parent;
            Getter bean = new Getter(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean Getter for foreachAttribute, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public Getter set_Getter(TemplateBean parentBean)
        {
            Getter bean = new Getter(parentBean, parent); 
            set(bean);
            return bean;
        }
    }

    /*------------------------------------------------------------------------*\
     * Creates the bean parts of this template bean that are used by the      *
     * super class for the toString() method.                                 *
    \*------------------------------------------------------------------------*/

    /** 
     * Initializer for variables and subtemplate structures
     * and for the data structures (i.e. bean parts) which prepare the bean data for the
     * toString() method.
     */
    protected void initialize()
    {
        // variables:
        variables.add("PackageName");
        variables.add("ClassName");        
        // subtemplates:
        subTemplateStructureIdentifiers.add("foreachAttribute");        
        // bean parts for toString() method:
        partList.add(new TextPart("package ",0));
        partList.add(new VariablePart("PackageName","<<PackageName>>",8));
        partList.add(new TextPart(";    \n  \npublic class ",27));
        partList.add(new VariablePart("ClassName","<<ClassName>>",13));
        partList.add(new TextPart("  implements Object\n{ \n    ",30));
        partList.add(new SubTemplateStructurePart("foreachAttribute",4,"Attribute"));
        partList.add(new TextOperatorPart(new DeleteTrailingWhitespaceLinesOperator(null)));
        partList.add(new TextPart(" \n    \n    /**\n     * Constructor with all attributes.\n     */\n    public ",3));
        partList.add(new VariablePart("ClassName","<<ClassName>>",11));
        partList.add(new TextPart("(",28));
        partList.add(new SubTemplateStructurePart("foreachAttribute",29,"Argument"));
        partList.add(new TextOperatorPart(new DeleteTrailingWhitespaceLinesOperator(",")));
        partList.add(new TextPart(")  \n    {\n        ",178));
        partList.add(new SubTemplateStructurePart("foreachAttribute",8,"AttributeInit"));
        partList.add(new TextOperatorPart(new DeleteTrailingWhitespaceLinesOperator(null)));
        partList.add(new TextPart("\n    }\n    \n    ",3));
        partList.add(new SubTemplateStructurePart("foreachAttribute",4,"Getter"));
        partList.add(new TextOperatorPart(new DeleteTrailingWhitespaceLinesOperator(null)));
        partList.add(new TextPart("         \n    \n    // {{ProtectedRegionStart::ManuallyWrittenCode}}    \n        // ...\n        // insert your customized code here!        \n        // ... \n    // {{ProtectedRegionEnd}}\n}\n",2));
    }
}


