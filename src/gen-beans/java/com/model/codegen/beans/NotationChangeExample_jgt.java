//
// AUTOMATICALLY GENERATED from template file NotationChangeExample.jgt
// 
// by the Jiowa Code Generation Framework (www.jiowa.de)
//

package com.model.codegen.beans;

import com.jiowa.template.variable.*;
import com.jiowa.template.bean.*;
import com.jiowa.template.bean.part.*;
import com.jiowa.template.variable.*;
import com.jiowa.template.variable.parser.*;
import com.jiowa.template.text.operator.*;
import java.util.*;

/**
 * AUTOMATICALLY GENERATED <br>
 *  
 * Template Bean: NotationChangeExample_jgt <br>
 * Generation Timestamp: Wed Dec 05 00:56:07 CET 2018 <br>
 * JIOWA CodeGen Version: jiowa-codegen-2.1.6 
 * 
 * <p>
 * Generated by the JIOWA Code Generation Framework (<a href="http://www.jiowa.de">www.jiowa.de</a>) <br>
 * Written by <a href="http://www.mencl.de/">Robert Mencl</a> for <br>
 * JIOWA Business Solutions GmbH, Bettinastr. 30, D-60325 Frankfurt am Main, Germany.<br>
 * Download link: <a href="http://www.jiowa.de/download.html">www.jiowa.de/download.html</a> <br>
 * License: <a href="http://www.jiowa.de/license.html">www.jiowa.de/license.html</a>
 * 
 */
@SuppressWarnings("unused")
public class NotationChangeExample_jgt extends TemplateBean
{   
    /*------------------------------------------------------------------------*\
     * Fields & constants:                                                    *
    \*------------------------------------------------------------------------*/
    
    /**
     * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
     */
    public static final java.lang.String ID = "NotationChangeExample.";            
    
    /*------------------------------------------------------------------------*\
     * Constructors:                                                          *
    \*------------------------------------------------------------------------*/

    public NotationChangeExample_jgt()
    {
        initialize();
    }

    /** 
     * Something similar like a copy constructor.
     * Actually it is a 'parent constructor'.
     * During evaluation, each time a variable or subtemplate has not been set the 
     * evaluator if has been set in the parent bean.
     * If so, it takes the values from the parent bean.
     * @param parent parent template bean for value propagation
     */    
    public NotationChangeExample_jgt(TemplateBean parent)
    {
        super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
        initialize();
    }
    
    /*------------------------------------------------------------------------*\
     * Static creation methods:                                               *
     * (often used while filling data into a template bean)                   *
    \*------------------------------------------------------------------------*/

    /**
     * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
     * @return the ID of this template bean as string value
     */
    @Override
    public java.lang.String id()
    {
        return ID; 
    }

    /*------------------------------------------------------------------------*\
     * Methods for template variables:                                        *
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
     * Classes & Methods for sub template structures:                         *
    \*------------------------------------------------------------------------*/
    
    /** 
     * Constant foreachAttribute which can be used for the data insertion process 
     */
    public final foreachAttribute foreachAttribute = new foreachAttribute(this);
    
    /**
     * This class resembles the subtemplate structure identifier 'foreachAttribute' from the 
     * template NotationChangeExample.jgt.
     */
    public static class foreachAttribute
    {
        /*------------------------------------------------------------------------*\
         * ID to template bean class mapping :                                    *
        \*------------------------------------------------------------------------*/
        
        /**
         * This map delivers the corresponding template bean class for a given (sub)template identifier.
         * This ensures that (sub)template filtering works even in those cases where the user might choose
         * to obfuscate his template beans (for whatever reason).
         */
        protected static ID2ClassMap ID_2_CLASS_MAP = new ID2ClassMap();
        
        /*------------------------------------------------------------------------*\
         * Parent template bean:                                                  *
        \*------------------------------------------------------------------------*/
        
        /** 
         * Parent template bean (also used for value propagation). 
         * If values or subtemplates are not set in this template, the initializations are propagated from 
         * the parent bean. 
         */
        protected NotationChangeExample_jgt parent = null;
    
        /*------------------------------------------------------------------------*\
         * Constructors:                                                          *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Constructor for foreachAttribute with a reference to parent bean. 
         * The parent bean is used for automatic value propagation which works for variable values as well as for subtemplates. 
         * @param parent parent bean for value propagation
         */
        protected foreachAttribute(NotationChangeExample_jgt parent)
        {
            this.parent = parent;
            if (this.parent != null)
            {
                this.parent.putID2ClassMap("foreachAttribute", ID_2_CLASS_MAP);
            }
        }    
    
        /*------------------------------------------------------------------------*\
         * Methods                                                                *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Returns a reference to parent template bean. 
         * @return parent template bean
         */
        protected NotationChangeExample_jgt parent()
        {
            return this.parent;        
        }
        
        /*------------------------------------------------------------------------*\
         * Nested classes for inline sub templates                                *
        \*------------------------------------------------------------------------*/
    
        /*------------------------------------------------------------------------*\
         * Public Methods for sub template structures:                            *
        \*------------------------------------------------------------------------*/
        
        /**
         * Returns all elements which have been stored for this sub template structure identifier: 'foreachAttribute'.
         * @return list of all template beans for this sub structure identifier: 'foreachAttribute'.
         */
        public TemplateBeanList getAll() 
        {
            return parent.subTemplateStructureMap().get("foreachAttribute");
        }
    
        /**
         * Sets all elements of the template bean list for the subtemplate structure identifier 'foreachAttribute'.
         * @param beanList the list of templates beans to be inserted for this substructure identifier: 'foreachAttribute'
         * @return reference to current template bean.
         */
        public NotationChangeExample_jgt setAll(TemplateBeanList beanList)
        {
            parent.subTemplateStructureMap.put("foreachAttribute", beanList);
            return parent;
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier)
        {
            return parent.setSubTemplate("foreachAttribute", subTemplateIdentifier);
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @param parentBean reference to parent bean for automatic value propagation
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier, TemplateBean parentBean)
        {
            return parent.setSubTemplate("foreachAttribute", subTemplateIdentifier, parentBean); 
        }
    
        /** 
         * Clears all data that has been stored for subtemplate structure identifier 'foreachAttribute'
         */
        public void clear()   
        {
            parent.subTemplateStructureMap().put("foreachAttribute", new TemplateBeanList()); 
        }
        
        /*------------------------------------------------------------------------*\
         * Methods for sub templates of this inline sub template:                 *
         * (inclusion of inline and external sub templates)                       *
        \*------------------------------------------------------------------------*/
    
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("SubTemplate.", SubTemplate_jgt.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for foreachAttribute. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public NotationChangeExample_jgt prepend(SubTemplate_jgt bean)
        {
            parent.subTemplateStructureMap.prepend("foreachAttribute", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean SubTemplate_jgt to foreachAttribute and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public SubTemplate_jgt prepend_SubTemplate_jgt()
        {
            TemplateBean parentBean = parent;
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean SubTemplate_jgt to foreachAttribute and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public SubTemplate_jgt prepend_SubTemplate_jgt(TemplateBean parentBean)
        {
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for foreachAttribute. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public NotationChangeExample_jgt append(SubTemplate_jgt bean)
        {
            parent.subTemplateStructureMap.append("foreachAttribute", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean SubTemplate_jgt to foreachAttribute and returns a reference to this bean. 
         * @return the reference to the created bean of type SubTemplate_jgt
         */
        public SubTemplate_jgt append_SubTemplate_jgt()
        {
            TemplateBean parentBean = parent;
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean SubTemplate_jgt to foreachAttribute and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type SubTemplate_jgt
         */
        public SubTemplate_jgt append_SubTemplate_jgt(TemplateBean parentBean)
        {
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of foreachAttribute to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public NotationChangeExample_jgt set(SubTemplate_jgt bean)
        {
            parent.subTemplateStructureMap.put("foreachAttribute", bean);
            return parent;
        }
        
        /** 
         * Sets a bean SubTemplate_jgt for foreachAttribute and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public SubTemplate_jgt set_SubTemplate_jgt()
        {
            TemplateBean parentBean = parent;
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean SubTemplate_jgt for foreachAttribute, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public SubTemplate_jgt set_SubTemplate_jgt(TemplateBean parentBean)
        {
            SubTemplate_jgt bean = new SubTemplate_jgt(parentBean); 
            set(bean);
            return bean;
        }
    }
    
    /** 
     * Constant ifCondition which can be used for the data insertion process 
     */
    public final ifCondition ifCondition = new ifCondition(this);
    
    /**
     * This class resembles the subtemplate structure identifier 'ifCondition' from the 
     * template NotationChangeExample.jgt.
     */
    public static class ifCondition
    {
        /*------------------------------------------------------------------------*\
         * ID to template bean class mapping :                                    *
        \*------------------------------------------------------------------------*/
        
        /**
         * This map delivers the corresponding template bean class for a given (sub)template identifier.
         * This ensures that (sub)template filtering works even in those cases where the user might choose
         * to obfuscate his template beans (for whatever reason).
         */
        protected static ID2ClassMap ID_2_CLASS_MAP = new ID2ClassMap();
        
        /*------------------------------------------------------------------------*\
         * Parent template bean:                                                  *
        \*------------------------------------------------------------------------*/
        
        /** 
         * Parent template bean (also used for value propagation). 
         * If values or subtemplates are not set in this template, the initializations are propagated from 
         * the parent bean. 
         */
        protected NotationChangeExample_jgt parent = null;
    
        /*------------------------------------------------------------------------*\
         * Constructors:                                                          *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Constructor for ifCondition with a reference to parent bean. 
         * The parent bean is used for automatic value propagation which works for variable values as well as for subtemplates. 
         * @param parent parent bean for value propagation
         */
        protected ifCondition(NotationChangeExample_jgt parent)
        {
            this.parent = parent;
            if (this.parent != null)
            {
                this.parent.putID2ClassMap("ifCondition", ID_2_CLASS_MAP);
            }
        }    
    
        /*------------------------------------------------------------------------*\
         * Methods                                                                *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Returns a reference to parent template bean. 
         * @return parent template bean
         */
        protected NotationChangeExample_jgt parent()
        {
            return this.parent;        
        }
        
        /*------------------------------------------------------------------------*\
         * Nested classes for inline sub templates                                *
        \*------------------------------------------------------------------------*/
    
        /**
         * Inline subtemplate bean class for identifier: Else 
         */
        public static class Else extends TemplateBean
        {   
            /*------------------------------------------------------------------------*\
             * Fields & constants:                                                    *
            \*------------------------------------------------------------------------*/
            
            /**
             * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
             */
            public static final java.lang.String ID = "Else";        
        
            /** Upward link from this template bean to host bean NotationChangeExample_jgt */
            protected NotationChangeExample_jgt NotationChangeExample_jgt;     
            
            /*------------------------------------------------------------------------*\
             * Constructors:                                                          *
            \*------------------------------------------------------------------------*/
        
            public Else()
            {
                initialize();
            }
        
            /** 
             * Something similar like a copy constructor.
             * Actually it is a 'parent constructor'.
             * During evaluation, each time a variable or subtemplate has not been set the 
             * evaluator if has been set in the parent bean.
             * If so, it takes the values from the parent bean.
             * @param parent parent template bean for value propagation
             */    
            public Else(TemplateBean parent)
            {
                super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
                initialize();
            }
        
            /**
             * Creates and instance of this bean with parent reference and links this bean 
             * to the host bean class which encloses this class above the substructure class.
             * 
             * @param parent Reference to the parent bean for value propagation. This can be a template bean of any type!
             * @param hostBean Reference to the template bean class instance in which this template bean is nesting in. 
             *                 This reference can be used to navigate 'upwards' during the data insertion process.
             */
            protected Else(TemplateBean parent, NotationChangeExample_jgt hostBean)
            {
                 super(parent);
                 this.NotationChangeExample_jgt = hostBean;
                 initialize();
            }
            
            /*------------------------------------------------------------------------*\
             * Static creation methods:                                               *
             * (often used while filling data into a template bean)                   *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
             * @return the ID of this template bean as string value
             */
            @Override
            public java.lang.String id()
            {
                return ID; 
            }
        
            /**
             * Returns the reference to the enclosing host template bean. 
             * This is used during the data insertion process for navigation across the different classes.
             * @return the reference to the host bean 'NotationChangeExample_jgt'
             */
            public NotationChangeExample_jgt NotationChangeExample_jgt()
            {   
                return this.NotationChangeExample_jgt;
            }
        
            /*------------------------------------------------------------------------*\
             * Methods for template variables:                                        *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Classes & Methods for sub template structures:                         *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Creates the bean parts of this template bean that are used by the      *
             * super class for the toString() method.                                 *
            \*------------------------------------------------------------------------*/
        
            /** 
             * Initializer for variables and subtemplate structures
             * and for the data structures (i.e. bean parts) which prepare the bean data for the
             * toString() method.
             */
            protected void initialize()
            {
                // variables:        
                // subtemplates:        
                // bean parts for toString() method:
                partList.add(new TextPart(" /* else */ ",0));
            }
        }
        
        /**
         * Inline subtemplate bean class for identifier: Then 
         */
        public static class Then extends TemplateBean
        {   
            /*------------------------------------------------------------------------*\
             * Fields & constants:                                                    *
            \*------------------------------------------------------------------------*/
            
            /**
             * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
             */
            public static final java.lang.String ID = "Then";        
        
            /** Upward link from this template bean to host bean NotationChangeExample_jgt */
            protected NotationChangeExample_jgt NotationChangeExample_jgt;     
            
            /*------------------------------------------------------------------------*\
             * Constructors:                                                          *
            \*------------------------------------------------------------------------*/
        
            public Then()
            {
                initialize();
            }
        
            /** 
             * Something similar like a copy constructor.
             * Actually it is a 'parent constructor'.
             * During evaluation, each time a variable or subtemplate has not been set the 
             * evaluator if has been set in the parent bean.
             * If so, it takes the values from the parent bean.
             * @param parent parent template bean for value propagation
             */    
            public Then(TemplateBean parent)
            {
                super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
                initialize();
            }
        
            /**
             * Creates and instance of this bean with parent reference and links this bean 
             * to the host bean class which encloses this class above the substructure class.
             * 
             * @param parent Reference to the parent bean for value propagation. This can be a template bean of any type!
             * @param hostBean Reference to the template bean class instance in which this template bean is nesting in. 
             *                 This reference can be used to navigate 'upwards' during the data insertion process.
             */
            protected Then(TemplateBean parent, NotationChangeExample_jgt hostBean)
            {
                 super(parent);
                 this.NotationChangeExample_jgt = hostBean;
                 initialize();
            }
            
            /*------------------------------------------------------------------------*\
             * Static creation methods:                                               *
             * (often used while filling data into a template bean)                   *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
             * @return the ID of this template bean as string value
             */
            @Override
            public java.lang.String id()
            {
                return ID; 
            }
        
            /**
             * Returns the reference to the enclosing host template bean. 
             * This is used during the data insertion process for navigation across the different classes.
             * @return the reference to the host bean 'NotationChangeExample_jgt'
             */
            public NotationChangeExample_jgt NotationChangeExample_jgt()
            {   
                return this.NotationChangeExample_jgt;
            }
        
            /*------------------------------------------------------------------------*\
             * Methods for template variables:                                        *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Classes & Methods for sub template structures:                         *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Creates the bean parts of this template bean that are used by the      *
             * super class for the toString() method.                                 *
            \*------------------------------------------------------------------------*/
        
            /** 
             * Initializer for variables and subtemplate structures
             * and for the data structures (i.e. bean parts) which prepare the bean data for the
             * toString() method.
             */
            protected void initialize()
            {
                // variables:        
                // subtemplates:        
                // bean parts for toString() method:
                partList.add(new TextPart(" /* then */ ",0));
            }
        }
    
        /*------------------------------------------------------------------------*\
         * Public Methods for sub template structures:                            *
        \*------------------------------------------------------------------------*/
        
        /**
         * Returns all elements which have been stored for this sub template structure identifier: 'ifCondition'.
         * @return list of all template beans for this sub structure identifier: 'ifCondition'.
         */
        public TemplateBeanList getAll() 
        {
            return parent.subTemplateStructureMap().get("ifCondition");
        }
    
        /**
         * Sets all elements of the template bean list for the subtemplate structure identifier 'ifCondition'.
         * @param beanList the list of templates beans to be inserted for this substructure identifier: 'ifCondition'
         * @return reference to current template bean.
         */
        public NotationChangeExample_jgt setAll(TemplateBeanList beanList)
        {
            parent.subTemplateStructureMap.put("ifCondition", beanList);
            return parent;
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier)
        {
            return parent.setSubTemplate("ifCondition", subTemplateIdentifier);
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @param parentBean reference to parent bean for automatic value propagation
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier, TemplateBean parentBean)
        {
            return parent.setSubTemplate("ifCondition", subTemplateIdentifier, parentBean); 
        }
    
        /** 
         * Clears all data that has been stored for subtemplate structure identifier 'ifCondition'
         */
        public void clear()   
        {
            parent.subTemplateStructureMap().put("ifCondition", new TemplateBeanList()); 
        }
        
        /*------------------------------------------------------------------------*\
         * Methods for sub templates of this inline sub template:                 *
         * (inclusion of inline and external sub templates)                       *
        \*------------------------------------------------------------------------*/
    
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("Else", Else.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for ifCondition. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public NotationChangeExample_jgt prepend(Else bean)
        {
            parent.subTemplateStructureMap.prepend("ifCondition", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean Else to ifCondition and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public Else prepend_Else()
        {
            TemplateBean parentBean = parent;
            Else bean = new Else(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean Else to ifCondition and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public Else prepend_Else(TemplateBean parentBean)
        {
            Else bean = new Else(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for ifCondition. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public NotationChangeExample_jgt append(Else bean)
        {
            parent.subTemplateStructureMap.append("ifCondition", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean Else to ifCondition and returns a reference to this bean. 
         * @return the reference to the created bean of type Else
         */
        public Else append_Else()
        {
            TemplateBean parentBean = parent;
            Else bean = new Else(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean Else to ifCondition and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type Else
         */
        public Else append_Else(TemplateBean parentBean)
        {
            Else bean = new Else(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of ifCondition to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public NotationChangeExample_jgt set(Else bean)
        {
            parent.subTemplateStructureMap.put("ifCondition", bean);
            return parent;
        }
        
        /** 
         * Sets a bean Else for ifCondition and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public Else set_Else()
        {
            TemplateBean parentBean = parent;
            Else bean = new Else(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean Else for ifCondition, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public Else set_Else(TemplateBean parentBean)
        {
            Else bean = new Else(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("Then", Then.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for ifCondition. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public NotationChangeExample_jgt prepend(Then bean)
        {
            parent.subTemplateStructureMap.prepend("ifCondition", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean Then to ifCondition and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public Then prepend_Then()
        {
            TemplateBean parentBean = parent;
            Then bean = new Then(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean Then to ifCondition and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public Then prepend_Then(TemplateBean parentBean)
        {
            Then bean = new Then(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for ifCondition. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public NotationChangeExample_jgt append(Then bean)
        {
            parent.subTemplateStructureMap.append("ifCondition", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean Then to ifCondition and returns a reference to this bean. 
         * @return the reference to the created bean of type Then
         */
        public Then append_Then()
        {
            TemplateBean parentBean = parent;
            Then bean = new Then(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean Then to ifCondition and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type Then
         */
        public Then append_Then(TemplateBean parentBean)
        {
            Then bean = new Then(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of ifCondition to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public NotationChangeExample_jgt set(Then bean)
        {
            parent.subTemplateStructureMap.put("ifCondition", bean);
            return parent;
        }
        
        /** 
         * Sets a bean Then for ifCondition and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public Then set_Then()
        {
            TemplateBean parentBean = parent;
            Then bean = new Then(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean Then for ifCondition, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public Then set_Then(TemplateBean parentBean)
        {
            Then bean = new Then(parentBean, parent); 
            set(bean);
            return bean;
        }
    }
    
    /** 
     * Constant If which can be used for the data insertion process 
     */
    public final If If = new If(this);
    
    /**
     * This class resembles the subtemplate structure identifier 'If' from the 
     * template NotationChangeExample.jgt.
     */
    public static class If
    {
        /*------------------------------------------------------------------------*\
         * ID to template bean class mapping :                                    *
        \*------------------------------------------------------------------------*/
        
        /**
         * This map delivers the corresponding template bean class for a given (sub)template identifier.
         * This ensures that (sub)template filtering works even in those cases where the user might choose
         * to obfuscate his template beans (for whatever reason).
         */
        protected static ID2ClassMap ID_2_CLASS_MAP = new ID2ClassMap();
        
        /*------------------------------------------------------------------------*\
         * Parent template bean:                                                  *
        \*------------------------------------------------------------------------*/
        
        /** 
         * Parent template bean (also used for value propagation). 
         * If values or subtemplates are not set in this template, the initializations are propagated from 
         * the parent bean. 
         */
        protected NotationChangeExample_jgt parent = null;
    
        /*------------------------------------------------------------------------*\
         * Constructors:                                                          *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Constructor for If with a reference to parent bean. 
         * The parent bean is used for automatic value propagation which works for variable values as well as for subtemplates. 
         * @param parent parent bean for value propagation
         */
        protected If(NotationChangeExample_jgt parent)
        {
            this.parent = parent;
            if (this.parent != null)
            {
                this.parent.putID2ClassMap("If", ID_2_CLASS_MAP);
            }
        }    
    
        /*------------------------------------------------------------------------*\
         * Methods                                                                *
        \*------------------------------------------------------------------------*/
    
        /** 
         * Returns a reference to parent template bean. 
         * @return parent template bean
         */
        protected NotationChangeExample_jgt parent()
        {
            return this.parent;        
        }
        
        /*------------------------------------------------------------------------*\
         * Nested classes for inline sub templates                                *
        \*------------------------------------------------------------------------*/
    
        /**
         * Inline subtemplate bean class for identifier: But 
         */
        public static class But extends TemplateBean
        {   
            /*------------------------------------------------------------------------*\
             * Fields & constants:                                                    *
            \*------------------------------------------------------------------------*/
            
            /**
             * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
             */
            public static final java.lang.String ID = "But";        
        
            /** Upward link from this template bean to host bean NotationChangeExample_jgt */
            protected NotationChangeExample_jgt NotationChangeExample_jgt;     
            
            /*------------------------------------------------------------------------*\
             * Constructors:                                                          *
            \*------------------------------------------------------------------------*/
        
            public But()
            {
                initialize();
            }
        
            /** 
             * Something similar like a copy constructor.
             * Actually it is a 'parent constructor'.
             * During evaluation, each time a variable or subtemplate has not been set the 
             * evaluator if has been set in the parent bean.
             * If so, it takes the values from the parent bean.
             * @param parent parent template bean for value propagation
             */    
            public But(TemplateBean parent)
            {
                super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
                initialize();
            }
        
            /**
             * Creates and instance of this bean with parent reference and links this bean 
             * to the host bean class which encloses this class above the substructure class.
             * 
             * @param parent Reference to the parent bean for value propagation. This can be a template bean of any type!
             * @param hostBean Reference to the template bean class instance in which this template bean is nesting in. 
             *                 This reference can be used to navigate 'upwards' during the data insertion process.
             */
            protected But(TemplateBean parent, NotationChangeExample_jgt hostBean)
            {
                 super(parent);
                 this.NotationChangeExample_jgt = hostBean;
                 initialize();
            }
            
            /*------------------------------------------------------------------------*\
             * Static creation methods:                                               *
             * (often used while filling data into a template bean)                   *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
             * @return the ID of this template bean as string value
             */
            @Override
            public java.lang.String id()
            {
                return ID; 
            }
        
            /**
             * Returns the reference to the enclosing host template bean. 
             * This is used during the data insertion process for navigation across the different classes.
             * @return the reference to the host bean 'NotationChangeExample_jgt'
             */
            public NotationChangeExample_jgt NotationChangeExample_jgt()
            {   
                return this.NotationChangeExample_jgt;
            }
        
            /*------------------------------------------------------------------------*\
             * Methods for template variables:                                        *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Classes & Methods for sub template structures:                         *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Creates the bean parts of this template bean that are used by the      *
             * super class for the toString() method.                                 *
            \*------------------------------------------------------------------------*/
        
            /** 
             * Initializer for variables and subtemplate structures
             * and for the data structures (i.e. bean parts) which prepare the bean data for the
             * toString() method.
             */
            protected void initialize()
            {
                // variables:        
                // subtemplates:        
                // bean parts for toString() method:
                partList.add(new TextPart(" /* do something here */ ",0));
            }
        }
        
        /**
         * Inline subtemplate bean class for identifier: I_mean 
         */
        public static class I_mean extends TemplateBean
        {   
            /*------------------------------------------------------------------------*\
             * Fields & constants:                                                    *
            \*------------------------------------------------------------------------*/
            
            /**
             * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
             */
            public static final java.lang.String ID = "I_mean";        
        
            /** Upward link from this template bean to host bean NotationChangeExample_jgt */
            protected NotationChangeExample_jgt NotationChangeExample_jgt;     
            
            /*------------------------------------------------------------------------*\
             * Constructors:                                                          *
            \*------------------------------------------------------------------------*/
        
            public I_mean()
            {
                initialize();
            }
        
            /** 
             * Something similar like a copy constructor.
             * Actually it is a 'parent constructor'.
             * During evaluation, each time a variable or subtemplate has not been set the 
             * evaluator if has been set in the parent bean.
             * If so, it takes the values from the parent bean.
             * @param parent parent template bean for value propagation
             */    
            public I_mean(TemplateBean parent)
            {
                super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
                initialize();
            }
        
            /**
             * Creates and instance of this bean with parent reference and links this bean 
             * to the host bean class which encloses this class above the substructure class.
             * 
             * @param parent Reference to the parent bean for value propagation. This can be a template bean of any type!
             * @param hostBean Reference to the template bean class instance in which this template bean is nesting in. 
             *                 This reference can be used to navigate 'upwards' during the data insertion process.
             */
            protected I_mean(TemplateBean parent, NotationChangeExample_jgt hostBean)
            {
                 super(parent);
                 this.NotationChangeExample_jgt = hostBean;
                 initialize();
            }
            
            /*------------------------------------------------------------------------*\
             * Static creation methods:                                               *
             * (often used while filling data into a template bean)                   *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
             * @return the ID of this template bean as string value
             */
            @Override
            public java.lang.String id()
            {
                return ID; 
            }
        
            /**
             * Returns the reference to the enclosing host template bean. 
             * This is used during the data insertion process for navigation across the different classes.
             * @return the reference to the host bean 'NotationChangeExample_jgt'
             */
            public NotationChangeExample_jgt NotationChangeExample_jgt()
            {   
                return this.NotationChangeExample_jgt;
            }
        
            /*------------------------------------------------------------------------*\
             * Methods for template variables:                                        *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Classes & Methods for sub template structures:                         *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Creates the bean parts of this template bean that are used by the      *
             * super class for the toString() method.                                 *
            \*------------------------------------------------------------------------*/
        
            /** 
             * Initializer for variables and subtemplate structures
             * and for the data structures (i.e. bean parts) which prepare the bean data for the
             * toString() method.
             */
            protected void initialize()
            {
                // variables:        
                // subtemplates:        
                // bean parts for toString() method:
                partList.add(new TextPart(" /* do something here */ ",0));
            }
        }
        
        /**
         * Inline subtemplate bean class for identifier: Otherwise 
         */
        public static class Otherwise extends TemplateBean
        {   
            /*------------------------------------------------------------------------*\
             * Fields & constants:                                                    *
            \*------------------------------------------------------------------------*/
            
            /**
             * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
             */
            public static final java.lang.String ID = "Otherwise";        
        
            /** Upward link from this template bean to host bean NotationChangeExample_jgt */
            protected NotationChangeExample_jgt NotationChangeExample_jgt;     
            
            /*------------------------------------------------------------------------*\
             * Constructors:                                                          *
            \*------------------------------------------------------------------------*/
        
            public Otherwise()
            {
                initialize();
            }
        
            /** 
             * Something similar like a copy constructor.
             * Actually it is a 'parent constructor'.
             * During evaluation, each time a variable or subtemplate has not been set the 
             * evaluator if has been set in the parent bean.
             * If so, it takes the values from the parent bean.
             * @param parent parent template bean for value propagation
             */    
            public Otherwise(TemplateBean parent)
            {
                super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
                initialize();
            }
        
            /**
             * Creates and instance of this bean with parent reference and links this bean 
             * to the host bean class which encloses this class above the substructure class.
             * 
             * @param parent Reference to the parent bean for value propagation. This can be a template bean of any type!
             * @param hostBean Reference to the template bean class instance in which this template bean is nesting in. 
             *                 This reference can be used to navigate 'upwards' during the data insertion process.
             */
            protected Otherwise(TemplateBean parent, NotationChangeExample_jgt hostBean)
            {
                 super(parent);
                 this.NotationChangeExample_jgt = hostBean;
                 initialize();
            }
            
            /*------------------------------------------------------------------------*\
             * Static creation methods:                                               *
             * (often used while filling data into a template bean)                   *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
             * @return the ID of this template bean as string value
             */
            @Override
            public java.lang.String id()
            {
                return ID; 
            }
        
            /**
             * Returns the reference to the enclosing host template bean. 
             * This is used during the data insertion process for navigation across the different classes.
             * @return the reference to the host bean 'NotationChangeExample_jgt'
             */
            public NotationChangeExample_jgt NotationChangeExample_jgt()
            {   
                return this.NotationChangeExample_jgt;
            }
        
            /*------------------------------------------------------------------------*\
             * Methods for template variables:                                        *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Classes & Methods for sub template structures:                         *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Creates the bean parts of this template bean that are used by the      *
             * super class for the toString() method.                                 *
            \*------------------------------------------------------------------------*/
        
            /** 
             * Initializer for variables and subtemplate structures
             * and for the data structures (i.e. bean parts) which prepare the bean data for the
             * toString() method.
             */
            protected void initialize()
            {
                // variables:        
                // subtemplates:        
                // bean parts for toString() method:
                partList.add(new TextPart(" /* do something here */ ",0));
            }
        }
        
        /**
         * Inline subtemplate bean class for identifier: Then 
         */
        public static class Then extends TemplateBean
        {   
            /*------------------------------------------------------------------------*\
             * Fields & constants:                                                    *
            \*------------------------------------------------------------------------*/
            
            /**
             * The ID for this template bean. It is used for type mapping during automatic value propagation of subtemplates.
             */
            public static final java.lang.String ID = "Then";        
        
            /** Upward link from this template bean to host bean NotationChangeExample_jgt */
            protected NotationChangeExample_jgt NotationChangeExample_jgt;     
            
            /*------------------------------------------------------------------------*\
             * Constructors:                                                          *
            \*------------------------------------------------------------------------*/
        
            public Then()
            {
                initialize();
            }
        
            /** 
             * Something similar like a copy constructor.
             * Actually it is a 'parent constructor'.
             * During evaluation, each time a variable or subtemplate has not been set the 
             * evaluator if has been set in the parent bean.
             * If so, it takes the values from the parent bean.
             * @param parent parent template bean for value propagation
             */    
            public Then(TemplateBean parent)
            {
                super(parent);  // 'parent constructor' similar to copy constructor. See explanation above!
                initialize();
            }
        
            /**
             * Creates and instance of this bean with parent reference and links this bean 
             * to the host bean class which encloses this class above the substructure class.
             * 
             * @param parent Reference to the parent bean for value propagation. This can be a template bean of any type!
             * @param hostBean Reference to the template bean class instance in which this template bean is nesting in. 
             *                 This reference can be used to navigate 'upwards' during the data insertion process.
             */
            protected Then(TemplateBean parent, NotationChangeExample_jgt hostBean)
            {
                 super(parent);
                 this.NotationChangeExample_jgt = hostBean;
                 initialize();
            }
            
            /*------------------------------------------------------------------------*\
             * Static creation methods:                                               *
             * (often used while filling data into a template bean)                   *
            \*------------------------------------------------------------------------*/
        
            /**
             * Returns the id of this template bean (i.e. either template file name or inline subtemplate identifier.
             * @return the ID of this template bean as string value
             */
            @Override
            public java.lang.String id()
            {
                return ID; 
            }
        
            /**
             * Returns the reference to the enclosing host template bean. 
             * This is used during the data insertion process for navigation across the different classes.
             * @return the reference to the host bean 'NotationChangeExample_jgt'
             */
            public NotationChangeExample_jgt NotationChangeExample_jgt()
            {   
                return this.NotationChangeExample_jgt;
            }
        
            /*------------------------------------------------------------------------*\
             * Methods for template variables:                                        *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Classes & Methods for sub template structures:                         *
            \*------------------------------------------------------------------------*/
        
            /*------------------------------------------------------------------------*\
             * Creates the bean parts of this template bean that are used by the      *
             * super class for the toString() method.                                 *
            \*------------------------------------------------------------------------*/
        
            /** 
             * Initializer for variables and subtemplate structures
             * and for the data structures (i.e. bean parts) which prepare the bean data for the
             * toString() method.
             */
            protected void initialize()
            {
                // variables:        
                // subtemplates:        
                // bean parts for toString() method:
                partList.add(new TextPart(" /* do something here */ ",0));
            }
        }
    
        /*------------------------------------------------------------------------*\
         * Public Methods for sub template structures:                            *
        \*------------------------------------------------------------------------*/
        
        /**
         * Returns all elements which have been stored for this sub template structure identifier: 'If'.
         * @return list of all template beans for this sub structure identifier: 'If'.
         */
        public TemplateBeanList getAll() 
        {
            return parent.subTemplateStructureMap().get("If");
        }
    
        /**
         * Sets all elements of the template bean list for the subtemplate structure identifier 'If'.
         * @param beanList the list of templates beans to be inserted for this substructure identifier: 'If'
         * @return reference to current template bean.
         */
        public NotationChangeExample_jgt setAll(TemplateBeanList beanList)
        {
            parent.subTemplateStructureMap.put("If", beanList);
            return parent;
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier)
        {
            return parent.setSubTemplate("If", subTemplateIdentifier);
        }
        
        /** 
         * Creates and sets a subtemplate according to its identifier and returns a reference to this sub template instance.
         * @param subTemplateIdentifier the identifier for the subtemplate. Examples: Attribute.jgt, Arg, ... etc.
         * @param parentBean reference to parent bean for automatic value propagation
         * @return reference to this sub template
         */
        public TemplateBean setSubTemplate(java.lang.String subTemplateIdentifier, TemplateBean parentBean)
        {
            return parent.setSubTemplate("If", subTemplateIdentifier, parentBean); 
        }
    
        /** 
         * Clears all data that has been stored for subtemplate structure identifier 'If'
         */
        public void clear()   
        {
            parent.subTemplateStructureMap().put("If", new TemplateBeanList()); 
        }
        
        /*------------------------------------------------------------------------*\
         * Methods for sub templates of this inline sub template:                 *
         * (inclusion of inline and external sub templates)                       *
        \*------------------------------------------------------------------------*/
    
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("But", But.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for If. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public NotationChangeExample_jgt prepend(But bean)
        {
            parent.subTemplateStructureMap.prepend("If", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean But to If and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public But prepend_But()
        {
            TemplateBean parentBean = parent;
            But bean = new But(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean But to If and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public But prepend_But(TemplateBean parentBean)
        {
            But bean = new But(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for If. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public NotationChangeExample_jgt append(But bean)
        {
            parent.subTemplateStructureMap.append("If", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean But to If and returns a reference to this bean. 
         * @return the reference to the created bean of type But
         */
        public But append_But()
        {
            TemplateBean parentBean = parent;
            But bean = new But(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean But to If and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type But
         */
        public But append_But(TemplateBean parentBean)
        {
            But bean = new But(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of If to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public NotationChangeExample_jgt set(But bean)
        {
            parent.subTemplateStructureMap.put("If", bean);
            return parent;
        }
        
        /** 
         * Sets a bean But for If and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public But set_But()
        {
            TemplateBean parentBean = parent;
            But bean = new But(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean But for If, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public But set_But(TemplateBean parentBean)
        {
            But bean = new But(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("I_mean", I_mean.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for If. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public NotationChangeExample_jgt prepend(I_mean bean)
        {
            parent.subTemplateStructureMap.prepend("If", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean I_mean to If and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public I_mean prepend_I_mean()
        {
            TemplateBean parentBean = parent;
            I_mean bean = new I_mean(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean I_mean to If and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public I_mean prepend_I_mean(TemplateBean parentBean)
        {
            I_mean bean = new I_mean(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for If. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public NotationChangeExample_jgt append(I_mean bean)
        {
            parent.subTemplateStructureMap.append("If", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean I_mean to If and returns a reference to this bean. 
         * @return the reference to the created bean of type I_mean
         */
        public I_mean append_I_mean()
        {
            TemplateBean parentBean = parent;
            I_mean bean = new I_mean(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean I_mean to If and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type I_mean
         */
        public I_mean append_I_mean(TemplateBean parentBean)
        {
            I_mean bean = new I_mean(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of If to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public NotationChangeExample_jgt set(I_mean bean)
        {
            parent.subTemplateStructureMap.put("If", bean);
            return parent;
        }
        
        /** 
         * Sets a bean I_mean for If and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public I_mean set_I_mean()
        {
            TemplateBean parentBean = parent;
            I_mean bean = new I_mean(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean I_mean for If, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public I_mean set_I_mean(TemplateBean parentBean)
        {
            I_mean bean = new I_mean(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("Otherwise", Otherwise.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for If. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public NotationChangeExample_jgt prepend(Otherwise bean)
        {
            parent.subTemplateStructureMap.prepend("If", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean Otherwise to If and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public Otherwise prepend_Otherwise()
        {
            TemplateBean parentBean = parent;
            Otherwise bean = new Otherwise(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean Otherwise to If and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public Otherwise prepend_Otherwise(TemplateBean parentBean)
        {
            Otherwise bean = new Otherwise(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for If. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public NotationChangeExample_jgt append(Otherwise bean)
        {
            parent.subTemplateStructureMap.append("If", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean Otherwise to If and returns a reference to this bean. 
         * @return the reference to the created bean of type Otherwise
         */
        public Otherwise append_Otherwise()
        {
            TemplateBean parentBean = parent;
            Otherwise bean = new Otherwise(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean Otherwise to If and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type Otherwise
         */
        public Otherwise append_Otherwise(TemplateBean parentBean)
        {
            Otherwise bean = new Otherwise(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of If to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public NotationChangeExample_jgt set(Otherwise bean)
        {
            parent.subTemplateStructureMap.put("If", bean);
            return parent;
        }
        
        /** 
         * Sets a bean Otherwise for If and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public Otherwise set_Otherwise()
        {
            TemplateBean parentBean = parent;
            Otherwise bean = new Otherwise(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean Otherwise for If, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public Otherwise set_Otherwise(TemplateBean parentBean)
        {
            Otherwise bean = new Otherwise(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /**
         * Add this subtemplate to ID & class mapping.
         */
        static
        {
            ID_2_CLASS_MAP.put("Then", Then.class);
        }
        
        /** 
         * Prepends the bean to the list of beans for If. 
         * @param bean the bean to inserted at the beginning the template bean list.
         * @return reference to current template bean.
         */
        public NotationChangeExample_jgt prepend(Then bean)
        {
            parent.subTemplateStructureMap.prepend("If", bean);    
            return parent;
        }
        
        /** 
         * Creates and prepends a bean Then to If and returns a reference to this bean. 
         * @return reference to current template bean.
         */
        public Then prepend_Then()
        {
            TemplateBean parentBean = parent;
            Then bean = new Then(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Creates and prepends a bean Then to If and sets a reference to a parent bean.
         * @param parentBean the reference to parent template bean for value propagation
         * @return reference to current templat bean
         */
        public Then prepend_Then(TemplateBean parentBean)
        {
            Then bean = new Then(parentBean, parent); 
            prepend(bean);
            return bean;
        }
        
        /** 
         * Appends the bean to the list of beans for If. 
         * @param bean the bean to be added to the list
         * @return reference to current template bean
         */
        public NotationChangeExample_jgt append(Then bean)
        {
            parent.subTemplateStructureMap.append("If", bean);    
            return parent;
        }
        
        /** 
         * Creates and appends a bean Then to If and returns a reference to this bean. 
         * @return the reference to the created bean of type Then
         */
        public Then append_Then()
        {
            TemplateBean parentBean = parent;
            Then bean = new Then(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Creates and appends a bean Then to If and initializes its values with the given TemplateBean and returns a reference to this bean. 
         * @param parentBean reference to parent template bean for value propagation.
         * @return the reference to the created bean of type Then
         */
        public Then append_Then(TemplateBean parentBean)
        {
            Then bean = new Then(parentBean, parent); 
            append(bean);
            return bean;
        }
        
        /** 
         * Sets the list of beans of If to exactly one bean. 
         * @param bean the bean which is inserted into the template bean list as one and only element.
         * @return reference to current template bean 
         */
        public NotationChangeExample_jgt set(Then bean)
        {
            parent.subTemplateStructureMap.put("If", bean);
            return parent;
        }
        
        /** 
         * Sets a bean Then for If and returns a reference to this bean.
         * @return reference to created template bean.
         */
        public Then set_Then()
        {
            TemplateBean parentBean = parent;
            Then bean = new Then(parentBean, parent); 
            set(bean);
            return bean;
        }
        
        /** 
         * Sets a bean Then for If, sets its parent template bean and returns a reference the created bean. 
         * @param parentBean the parent template bean for value propagation.
         * @return reference to created template bean
         */
        public Then set_Then(TemplateBean parentBean)
        {
            Then bean = new Then(parentBean, parent); 
            set(bean);
            return bean;
        }
    }

    /*------------------------------------------------------------------------*\
     * Creates the bean parts of this template bean that are used by the      *
     * super class for the toString() method.                                 *
    \*------------------------------------------------------------------------*/

    /** 
     * Initializer for variables and subtemplate structures
     * and for the data structures (i.e. bean parts) which prepare the bean data for the
     * toString() method.
     */
    protected void initialize()
    {
        // variables:        
        // subtemplates:
        subTemplateStructureIdentifiers.add("foreachAttribute");
        subTemplateStructureIdentifiers.add("ifCondition");
        subTemplateStructureIdentifiers.add("If");        
        // bean parts for toString() method:
        partList.add(new TextPart("\n",0));
        partList.add(new TextPart("  \n\n",54));
        partList.add(new SubTemplateStructurePart("foreachAttribute",0,"SubTemplate."));
        partList.add(new TextPart("  \n\n",40));
        partList.add(new TextPart("  \n\n",53));
        partList.add(new SubTemplateStructurePart("If",0,"But","Otherwise","I_mean","Then"));
        partList.add(new TextPart("\n        \n",52));
        partList.add(new TextPart("   \n  \n",68));
        partList.add(new SubTemplateStructurePart("ifCondition",0,"Else","Then"));
        partList.add(new TextPart("        \n        \n          ",63));
    }
}


